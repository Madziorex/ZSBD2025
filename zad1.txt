CREATE TABLE REGIONS (
region_id INT PRIMARY KEY,
region_name VARCHAR(50)
);

CREATE TABLE COUNTRIES (
country_id INT PRIMARY KEY,
country_name VARCHAR(50),
region_id INT,
FOREIGN KEY (region_id) REFERENCES REGIONS(region_id)
);

CREATE TABLE LOCATIONS (
location_id INT PRIMARY KEY,
street_address VARCHAR(50),
postal_code VARCHAR(6),
city VARCHAR(50),
stale_province VARCHAR(50),
country_id INT,
FOREIGN KEY (country_id) REFERENCES COUNTRIES(country_id)
);

CREATE TABLE JOBS (
job_id INT PRIMARY KEY NOT NULL,
job_title VARCHAR(50),
min_salary INT,
max_salary INT,
CONSTRAINT salary_range CHECK (max_salary - min_salary >= 2000)
);

CREATE TABLE JOB_HISTORY (
employee_id INT,
start_date DATE,
end_date DATE,
job_id INT,
department_id INT
);

CREATE TABLE EMPLOYEES (
employee_id INT,
first_name VARCHAR(50),
last_name VARCHAR(50),
email VARCHAR(50),
phone_number INT,
hire_date DATE,
job_id INT,
comminsion_pct DECIMAL(38, 2),
manager_id INT,
department_id INT
);

CREATE TABLE DEPARTMENTS (
department_id INT,
department_name VARCHAR(50),
manager_id INT,
location_id INT
);

ALTER TABLE JOB_HISTORY
ADD CONSTRAINT pk_jh
PRIMARY KEY (employee_id, start_date);

ALTER TABLE EMPLOYEES
ADD CONSTRAINT pk_emp
PRIMARY KEY (employee_id);

ALTER TABLE DEPARTMENTS
ADD CONSTRAINT pk_dep
PRIMARY KEY (department_id);

ALTER TABLE DEPARTMENTS
ADD CONSTRAINT fk_dep
FOREIGN KEY (manager_id)
REFERENCES EMPLOYEES(employee_id);

ALTER TABLE DEPARTMENTS
ADD CONSTRAINT fk_dep_loc
FOREIGN KEY (location_id)
REFERENCES LOCATIONS(location_id);

ALTER TABLE JOB_HISTORY
ADD CONSTRAINT fk_jh_emp
FOREIGN KEY (employee_id)
REFERENCES EMPLOYEES(employee_id);

ALTER TABLE JOB_HISTORY
ADD CONSTRAINT fk_jh_job
FOREIGN KEY (job_id)
REFERENCES JOBS(job_id);

ALTER TABLE JOB_HISTORY
ADD CONSTRAINT fk_jh_dep
FOREIGN KEY (department_id)
REFERENCES DEPARTMENTS(department_id);

ALTER TABLE EMPLOYEES
ADD CONSTRAINT fk_emp_dep
FOREIGN KEY (department_id)
REFERENCES DEPARTMENTS(department_id);

ALTER TABLE EMPLOYEES
ADD CONSTRAINT fk_manager
FOREIGN KEY (manager_id)
REFERENCES EMPLOYEES(employee_id);

ALTER TABLE EMPLOYEES
ADD CONSTRAINT fk_jobs
FOREIGN KEY (job_id)
REFERENCES JOBS(job_id);

CREATE SEQUENCE seq_regions START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER bi_regions
BEFORE INSERT ON regions
FOR EACH ROW
WHEN (NEW.region_id IS NULL)
BEGIN
  SELECT seq_regions.NEXTVAL INTO :NEW.region_id FROM dual;
END;

CREATE SEQUENCE seq_countries START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER bi_countries
BEFORE INSERT ON countries
FOR EACH ROW
WHEN (NEW.country_id IS NULL)
BEGIN
  SELECT seq_countries.NEXTVAL INTO :NEW.country_id FROM dual;
END;

CREATE SEQUENCE seq_locations START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER bi_locations
BEFORE INSERT ON locations
FOR EACH ROW
WHEN (NEW.location_id IS NULL)
BEGIN
  SELECT seq_locations.NEXTVAL INTO :NEW.location_id FROM dual;
END;

CREATE SEQUENCE seq_jobs START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER bi_jobs
BEFORE INSERT ON jobs
FOR EACH ROW
WHEN (NEW.job_id IS NULL)
BEGIN
  SELECT seq_jobs.NEXTVAL INTO :NEW.job_id FROM dual;
END;

CREATE SEQUENCE seq_employees START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER bi_employees
BEFORE INSERT ON employees
FOR EACH ROW
WHEN (NEW.employee_id IS NULL)
BEGIN
  SELECT seq_employees.NEXTVAL INTO :NEW.employee_id FROM dual;
END;

CREATE SEQUENCE seq_departments START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER bi_departments
BEFORE INSERT ON departments
FOR EACH ROW
WHEN (NEW.department_id IS NULL)
BEGIN
  SELECT seq_departments.NEXTVAL INTO :NEW.department_id FROM dual;
END;

INSERT INTO jobs (job_id, job_title, min_salary, max_salary)
VALUES ('Software Engineer', 5000, 12000);

INSERT INTO jobs (job_title, min_salary, max_salary)
VALUES ('Data Analyst', 4000, 9000);

INSERT INTO jobs (job_title, min_salary, max_salary)
VALUES ('Project Manager', 7000, 15000);

INSERT INTO jobs (job_title, min_salary, max_salary)
VALUES ('HR Specialist', 3500, 7000);

INSERT INTO employees (first_name, last_name, email, phone_number, hire_date)
VALUES ('Anna', 'Nowak', 'anowak@example.com', 501123456, DATE '2022-05-10');

INSERT INTO employees (first_name, last_name, email, phone_number, hire_date)
VALUES ('Piotr', 'Kowalski', 'pkowalski@example.com', 502987654, DATE '2023-01-15');

INSERT INTO employees (first_name, last_name, email, phone_number, hire_date)
VALUES ('Magda', 'Zielińska', 'mzielinska@example.com', 503456789, DATE '2023-08-20');

INSERT INTO employees (first_name, last_name, email, phone_number, hire_date)
VALUES ('Tomasz', 'Wójcik', 'twojcik@example.com', 504654321, DATE '2024-02-01');

UPDATE employees
SET manager_id = 1
WHERE employee_id IN (2, 3);

UPDATE jobs
SET 
    min_salary = min_salary + 500,
    max_salary = max_salary + 500
WHERE LOWER(job_title) LIKE '%b%' 
   OR LOWER(job_title) LIKE '%s%';

DELETE FROM jobs
WHERE max_salary > 9000;
